#ifndef SECTIONFILTER_H
#define SECTIONFILTER_H

#include "particle.h"
#include "filter.h"
#include <Eigen/Dense>

namespace ForceChain
{
    class SectionFilter : public Filter
    {
    public:
        virtual void WriteGeo(const std::string fileName) = 0;
    };

    class BoxFilter : public SectionFilter
    {
    public:
        Eigen::Vector3d xmin;
        Eigen::Vector3d xmax;

        BoxFilter(double x0, double x1,
                  double y0, double y1,
                  double z0, double z1)
            : xmin(x0, y0, z0), xmax(x1, y1, z1) {}

        bool IsInside(const Particle &particle) override
        {

            for (size_t i = 0; i < 3; i++)
            {
                if (particle.position(i) < xmin(i) ||
                    particle.position(i) > xmax(i))
                    return false;
            }
            return true;
        };

        void WriteGeo(const std::string fileName) override
        {
            auto fileStream = std::ofstream(fileName);
            if (fileStream.fail())
            {
                throw std::runtime_error("\n Error: The below file cannot be created:\n" + fileName);
            }

            fileStream << "# vtk DataFile Version 4.0\n"
                       << "Generated by LIGGGHTS\n"
                       << "ASCII\n"
                       << "DATASET RECTILINEAR_GRID\n"
                       << "DIMENSIONS 2 2 2\n"
                       << "X_COORDINATES 2 double\n"
                       << xmin[0] << " " << xmax[0] << "\n"
                       << "Y_COORDINATES 2 double\n"
                       << xmin[1] << " " << xmax[1] << "\n"
                       << "Z_COORDINATES 2 double\n"
                       << xmin[2] << " " << xmax[2] << "\n";
            fileStream.close();
        }
    };

    class SphereFilter : public SectionFilter
    {
    public:
        double radius;
        Eigen::Vector3d center;

        SphereFilter(Eigen::Vector3d center_, double radius_)
            : center(center_), radius(radius_) {}

        bool IsInside(const Particle &particle) override
        {
            auto dist = (particle.position - center).norm();
            return dist <= radius;
        };
    };
}
#endif // SECTIONFILTER_H